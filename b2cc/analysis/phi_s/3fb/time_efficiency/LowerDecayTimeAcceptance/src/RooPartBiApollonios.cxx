/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooPartBiApollonios.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

//ClassImp(RooPartBiApollonios) 

RooPartBiApollonios::RooPartBiApollonios(const char *name, const char *title, 
                                 RooAbsReal& _m,
                                 RooAbsReal& _m0,
                                 RooAbsReal& _sigma,
                                 RooAbsReal& _b,
                                 RooAbsReal& _a_l,
                                 RooAbsReal& _a_r,
                                 RooAbsReal& _n_l,
                                 RooAbsReal& _n_r) :
  RooAbsPdf(name,title), 
  m("m","m",this,_m),
  m0("m0","m0",this,_m0),
  sigma("sigma","sigma",this,_sigma),
  b("b","b",this,_b),
  a_l("a_l","a_l",this,_a_l),
  a_r("a_r","a_r",this,_a_r),
  n_l("n_l","n_l",this,_n_l),
  n_r("n_r","n_r",this,_n_r)
{ 
} 


 RooPartBiApollonios::RooPartBiApollonios(const RooPartBiApollonios& other, const char* name) :  
   RooAbsPdf(other,name), 
   m("m",this,other.m),
   m0("m0",this,other.m0),
   sigma("sigma",this,other.sigma),
   b("b",this,other.b),
   a_l("a_l",this,other.a_l),
   a_r("a_r",this,other.a_r),
   n_l("n_l",this,other.n_l),
   n_r("n_r",this,other.n_r)
 { 
 } 



 Double_t RooPartBiApollonios::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   //return 1.0 ; 
   
   Double_t xi = (m-m0)/sigma;
   if(xi>0){
     if (xi <= a_r) {
       return exp(-b*sqrt(1+ xi*xi));
     } else {
       Double_t B = -1.*(a_r - n_r*sqrt(1+a_r*a_r)/(b*a_r));
       Double_t A = exp(-b*sqrt(1+a_r*a_r)) *pow(B+a_r,n_r);
       return A*pow(B+xi,-n_r);
     }
   }else{
     if (xi >= -a_l) {
       return exp(-b*sqrt(1+ xi*xi));
     } else {
       Double_t B = -1.*(a_l - n_l*sqrt(1+a_l*a_l)/(b*a_l));
       Double_t A = exp(-b*sqrt(1+a_l*a_l)) *pow(B+a_l,n_l);
       return A*pow(B-xi,-n_l);
     }
   }
 } 
