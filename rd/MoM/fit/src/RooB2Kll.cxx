/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooB2Kll.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

//ClassImp(RooB2Kll) 

RooB2Kll::RooB2Kll(const char *name, const char *title, 
                                 RooAbsReal& _cosTheta,
                                 RooAbsReal& _G000,
                                 RooAbsReal& _G001,
                                 RooAbsReal& _G002,
                                 RooAbsReal& _G003,
                                 RooAbsReal& _G004
                                 ) :
  RooAbsPdf(name,title), 
  cosTheta("cosTheta","cosTheta",this,_cosTheta),
  G000("G000","G000",this,_G000),
  G001("G001","G001",this,_G001),
  G002("G002","G002",this,_G002),
  G003("G003","G003",this,_G003),
  G004("G004","G004",this,_G004)
{ 
} 


 RooB2Kll::RooB2Kll(const RooB2Kll& other, const char* name) :  
   RooAbsPdf(other,name), 
   cosTheta("cosTheta",this,other.cosTheta),
   G000("G000",this,other.G000),
   G001("G001",this,other.G001),
   G002("G002",this,other.G002),
   G003("G003",this,other.G003),
   G004("G004",this,other.G004)
 { 
 } 



 Double_t RooB2Kll::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   //return 1.0 ; 
 
    Double_t rate = G000 + G001*cosTheta + G002*(3*cosTheta*cosTheta - 1)/2.;
    //rate += G003*(5. *pow(cosTheta,3) - 3. *cosTheta)/2.; // higher order terms
    //rate += G004*(35.*pow(cosTheta,4) - 30.*cosTheta*cosTheta + 3.)/8.;
    Double_t eff = 1.;// - cosTheta*cosTheta/2.;
    Double_t norm = 2.*G000;//-2.*_g2/15. + 5./3.; // need additional term in normalisation if G003, G004 != 0
    return rate*eff/norm;
 } 
